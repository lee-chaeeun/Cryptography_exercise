[user@user]$ gpg --list-keys 

pub ...
uid ...

[user@user]$ gpg --full-generate-key

gpg (GnuPG) 2.2.32; Copyright (C) 2021 Free Software Foundation, Inc.
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.

Please select what kind of key you want:
   (1) RSA and RSA (default)
   (2) DSA and Elgamal
   (3) DSA (sign only)
   (4) RSA (sign only)
  (14) Existing key from card
Your selection? 

1 

RSA keys may be between 1024 and 4096 bits long.
What keysize do you want? (3072)

3072

Requested keysize is 3072 bits
Please specify how long the key should be valid.

Please specify how long the key should be valid.
         0 = key does not expire
      <n>  = key expires in n days
      <n>w = key expires in n weeks
      <n>m = key expires in n months
      <n>y = key expires in n years
Key is valid for? (0) 

Key does not expire at all 
Is this correct (y/N) y

GnuPG needs to construct a user ID to identify your key

Real name: xxx
Email address: xxx@xxx.com
Comment:
You selected this USER-ID: 
  "xxx <xxx@xxx.com>"

Change (N)ame, (C)omment, (E)mail or (O)kay/(Q)uit?

o

We need to generate a lot of random bytes. It is a good idea to perform
some other action (type on the keyboard, move the mouse, utilize the
disks) during the prime generation; this gives the random number
generator a better chance to gain enough entropy.
We need to generate a lot of random bytes. It is a good idea to perform
some other action (type on the keyboard, move the mouse, utilize the
disks) during the prime generation; this gives the random number
generator a better chance to gain enough entropy.
gpg: key C9363C374D7A30D6 marked as ultimately trusted
gpg: revocation certificate stored as '/home/chae/.gnupg/openpgp-revocs.d/8533F3FA4572075FA5D655BCC9363C374D7A30D6.rev'
public and secret key created and signed.

pub rsaxxx
uid xxx <xxx@xxx.com>
sub rsaxxx 

[user@user]$ gpg --list-secret-keys 

sec rsa_xxx
uid
ssb

[user@user]$ gpg --armor --ouptut public-key-of-xxx.asc --export xxx@xxx.com 
-----BEGIN PGP PUBLIC KEY BLOCK-----
.............................................
.............................................
-----END PGP PUBLIC KEY BLOCK-----

[user@user]$gpg --output encryptedfile.gpg --encrypt --sign --armor --recipient yyy@yyy.com

[user@user]$ gpg --import encryptedfile.gpg'


[user@user]$ gpg --decrypt encryptedfile > decryptedfile.txt
gpg: encrypted with 3072-bit RSA key, ID xxxx, created xxxx-xx-xx



